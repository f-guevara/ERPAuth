@page "/add-order"
@inject OrderService OrderService
@inject CustomerService CustomerService
@inject ArticleService ArticleService
@inject InventoryService InventoryService

@using ERPAuth.Client.Models

<h3>Add Order</h3>

<EditForm Model="newOrder" OnValidSubmit="HandleAddOrder">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p class="text-info">
        Items not currently in stock will remain on backorder and will be fulfilled as inventory becomes available.
    </p>

    <!-- Customer Dropdown -->
    <div class="form-group">
        <label for="customerId">Customer</label>
        <select id="customerId" @bind="newOrder.CustomerId" class="form-control">
            <option value="">Select a customer</option>
            @foreach (var customer in customers)
            {
                <option value="@customer.Id">@customer.FirstName @customer.LastName</option>
            }
        </select>
    </div>

    <!-- Client Order Number -->
    <div class="form-group">
        <label for="clientOrderNumber">Client Order Number</label>
        <InputText id="clientOrderNumber" @bind-Value="newOrder.ClientOrderNumber" class="form-control" />
    </div>

    <!-- Client Order Date -->
    <div class="form-group">
        <label for="clientOrderDate">Client Order Date</label>
        <InputDate id="clientOrderDate" @bind-Value="newOrder.ClientOrderDate" class="form-control" />
    </div>

    <!-- Order Placed By -->
    <div class="form-group">
        <label for="orderPlacedBy">Order Placed By</label>
        <InputText id="orderPlacedBy" @bind-Value="newOrder.OrderPlacedBy" class="form-control" />
    </div>

    <!-- Order Method -->
    <div class="form-group">
        <label for="orderMethod">Order Method</label>
        <InputText id="orderMethod" @bind-Value="newOrder.OrderMethod" class="form-control" placeholder="e.g., Email, Phone" />
    </div>

    <!-- Order Items -->
    <h4>Order Items</h4>
    @foreach (var item in newOrder.Items)
    {
        <div class="row mb-3">
            <!-- Article Dropdown -->
            <div class="col-md-6">
                <select class="form-control" @onchange="(e) => OnArticleChange(item, e)">
                    <option value="">Select an article</option>
                    @foreach (var article in articles)
                    {
                        <option value="@article.CompanyCode">@article.Name (@article.CompanyCode)</option>
                    }
                </select>
            </div>

            <!-- Quantity -->
            <div class="col-md-2">
                <InputNumber @bind-Value="item.Quantity" class="form-control" placeholder="Quantity" />
            </div>

            <!-- Price -->
            <div class="col-md-2">
                <InputNumber @bind-Value="item.Price" class="form-control" placeholder="Price" />
            </div>

            <!-- Remove Item Button -->
            <div class="col-md-2">
                <button type="button" class="btn btn-danger" @onclick="() => RemoveOrderItem(item)">Remove</button>
            </div>
        </div>
    }

    <!-- Add Item Button -->
    <button type="button" class="btn btn-primary mb-3" @onclick="AddOrderItem">Add Item</button>

    <!-- Submit Button -->
    <button type="submit" class="btn btn-success">Save Order</button>
</EditForm>

@if (errorMessage != null)
{
    <p class="text-danger">Error: @errorMessage</p>
}

@code {
    private Order newOrder = new Order(); // New order object
    private List<Customer> customers = new(); // List of customers
    private List<Article> articles = new(); // List of articles
    private string? errorMessage; // Error message for display

    protected override async Task OnInitializedAsync()
    {
        try
        {
            customers = await CustomerService.GetAllCustomersAsync();
            articles = await ArticleService.GetAllArticlesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load data: {ex.Message}";
        }
    }

    private void AddOrderItem()
    {
        newOrder.Items.Add(new OrderItem());
    }

    private void RemoveOrderItem(OrderItem item)
    {
        newOrder.Items.Remove(item);
    }

    private async Task SetArticleId(OrderItem item)
    {
        // Fetch the ArticleId based on the selected CompanyCode
        var article = await ArticleService.GetArticleByCodeAsync(item.CompanyCode);
        if (article != null)
        {
            item.ArticleId = article.Id; // Set the ArticleId
        }
    }

    private async Task HandleAddOrder()
    {
        try
        {
            // Set default dates to UTC if not provided
            if (newOrder.ClientOrderDate.HasValue)
            {
                newOrder.ClientOrderDate = DateTime.SpecifyKind(newOrder.ClientOrderDate.Value, DateTimeKind.Utc);
            }

            newOrder.OrderDate = DateTime.SpecifyKind(newOrder.OrderDate, DateTimeKind.Utc);

            foreach (var item in newOrder.Items)
            {
                if (item.DeliveryDate == default)
                {
                    item.DeliveryDate = DateTime.UtcNow.AddDays(7); // Default to 7 days later
                }
                else
                {
                    item.DeliveryDate = DateTime.SpecifyKind(item.DeliveryDate, DateTimeKind.Utc);
                }

                // Ensure inventory reference is nullable to allow items not in stock
                item.InventoryId = null;
            }

            // Save the order without validating inventory
            await OrderService.CreateOrderAsync(newOrder);

            newOrder = new Order(); // Reset the form
            errorMessage = null; // Clear error message
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to add order: {ex.Message}";
        }
    }




    private async Task OnArticleChange(OrderItem item, ChangeEventArgs e)
    {
        item.CompanyCode = e.Value?.ToString();

        if (!string.IsNullOrEmpty(item.CompanyCode))
        {
            // Fetch article based on the selected CompanyCode
            var article = await ArticleService.GetArticleByCodeAsync(item.CompanyCode);

            if (article != null)
            {
                item.ArticleId = article.Id;

                // Fetch available inventory for the selected article
                var availableInventory = await InventoryService.GetAvailableInventoryForArticle(article.Id);

                // Calculate total available quantity across all lots
                int totalAvailable = availableInventory.Sum(i => i.TotalQuantity - i.ReservedQuantity);

                // Validate if enough inventory is available
                if (item.Quantity > totalAvailable)
                {
                    errorMessage = $"Insufficient stock for {article.Name}. Available: {totalAvailable}.";
                }
                else
                {
                    errorMessage = null; // Clear error message if stock is sufficient
                }
            }
        }
    }

}

@page "/order-management"
@inject OrderService OrderService
@inject InventoryService InventoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@using ERPAuth.Client.Models

<h3>Order Management</h3>

@if (orders == null)
{
    <p>Loading orders...</p>
}
else
{
<table class="table">
    <thead>
        <tr>
            <th>Order ID</th>
            <th>Customer</th>
            <th>Date</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var order in orders)
        {
            <tr>
                <td>@order.Id</td>
                <td>@order.Customer.FirstName @order.Customer.LastName</td>
                <td>@order.OrderDate.ToShortDateString()</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => OpenOrder(order.Id)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => ConfirmDelete(order.Id)">Delete</button>
                        <button class="btn btn-primary" @onclick="() => NavigateToPackingList(order.Id)">
                            Create Packing List
                        </button>
                </td>
            </tr>
        }
    </tbody>
</table>

    <div class="modal fade @(showDeleteConfirmation ? "show d-block" : "")" id="deleteModal" tabindex="-1" aria-hidden="true" style="display: @(showDeleteConfirmation ? "block" : "none");">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteConfirmation"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this order?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDeleteConfirmation">Cancel</button>
                    <button class="btn btn-danger" @onclick="DeleteOrder">Delete</button>
                </div>
            </div>
        </div>
    </div>


}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">Error: @errorMessage</p>
}

@code {
    private List<Order> orders;
    private string? errorMessage;
    private bool showDeleteConfirmation;
    private int orderIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            orders = await OrderService.GetAllOrdersAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load orders: {ex.Message}";
        }
    }

   

    private async Task ConfirmDelete(int orderId)
    {
        orderIdToDelete = orderId;
        await ShowDeleteModal();
    }



    private async Task DeleteOrder()
    {
        try
        {
            await OrderService.DeleteOrderAsync(orderIdToDelete);
            orders = await OrderService.GetAllOrdersAsync(); // Refresh the orders list
            await CloseDeleteConfirmation(); // Close the modal after deletion
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete order: {ex.Message}";
        }
    }
    private void OpenOrder(int orderId)
    {
        NavigationManager.NavigateTo($"/edit-order/{orderId}");
    }
    private async Task ShowDeleteModal()
    {
        showDeleteConfirmation = true;
        await JSRuntime.InvokeVoidAsync("openModal", "deleteModal");
    }

    private async Task CloseDeleteConfirmation()
    {
        showDeleteConfirmation = false;
        await JSRuntime.InvokeVoidAsync("closeModal", "deleteModal");
    }
    private void NavigateToPackingList(int orderId)
    {
        NavigationManager.NavigateTo($"/packing-list/{orderId}");
    }

}

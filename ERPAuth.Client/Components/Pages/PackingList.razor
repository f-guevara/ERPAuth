@page "/packing-list/{orderId:int}"
@inject PackingListService PackingListService
@inject OrderService OrderService
@using ERPAuth.Client.Models
@using ERPAuth.Client.Services

<h3>Create Packing List</h3>

@if (order == null)
{
    <p>Loading order...</p>
}
else
{
    <h4>Order #@order.Id</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Article</th>
                <th>Ordered</th>
                <th>Shipped</th>
                <th>Remaining</th>
                <th>To Ship</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in packingListItems)
            {
                <tr>
                    <td>@item.ArticleName</td>
                    <td>@item.Quantity</td>
                    <td>@item.QuantityShipped</td>
                    <td>@item.QuantityRemaining</td>
                    <td>
                        <InputNumber @bind-Value="item.QuantityToShip"
                                     class="form-control"
                                     Min="0"
                                     Max="@item.QuantityRemaining" />
                    </td>
                </tr>
            }
        </tbody>

    </table>

    <button @onclick="CreatePackingList">Create Packing List</button>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private string? successMessage;
    private string? errorMessage;
    [Parameter]
    public int orderId { get; set; }

    private Order? order;
    private List<PackingListItemViewModel> packingListItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine($"Fetching order with ID: {orderId}");
            order = await OrderService.GetOrderByIdAsync(orderId);

            if (order != null)
            {
                Console.WriteLine($"Order found: {order.Id}");
                packingListItems = order.Items.Select(item => new PackingListItemViewModel
                    {
                        OrderItemId = item.Id,
                        ArticleName = item.Article?.Name ?? "Unknown",
                        Quantity = item.Quantity,
                        QuantityShipped = item.QuantityShipped
                    }).ToList();

                Console.WriteLine($"Packing list items loaded: {packingListItems.Count}");
            }
            else
            {
                Console.WriteLine($"No order found for ID: {orderId}");
                errorMessage = "Order not found.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading order: {ex.Message}");
            errorMessage = $"Failed to load order: {ex.Message}";
        }
    }

    private async Task CreatePackingList()
    {
        try
        {
            // Map ViewModel to PackingListItem
            var packingListItemsToSave = packingListItems
                .Where(item => item.QuantityToShip > 0)
                .Select(item => new PackingListItem
                    {
                        OrderItemId = item.OrderItemId,
                        QuantityShipped = item.QuantityToShip
                    })
                .ToList();

            await PackingListService.CreatePackingListAsync(orderId, packingListItemsToSave);
            successMessage = "Packing list created successfully!";
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to create packing list: {ex.Message}";
        }
    }

}


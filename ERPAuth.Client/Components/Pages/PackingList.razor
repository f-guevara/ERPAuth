@page "/packing-list/{orderId:int}"
@inject PackingListService PackingListService
@inject OrderService OrderService
@using ERPAuth.Client.Models
@using ERPAuth.Client.Services

<h3>Create Packing List</h3>

@if (order == null)
{
    <p>Loading order...</p>
}
else
{
    <h4>Order #@order.Id</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Article</th>
                <th>Ordered</th>
                <th>Shipped</th>
                <th>Remaining</th>
                <th>To Ship</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in packingListItems)
            {
                <tr>
                    <td>@item.ArticleName</td>
                    <td>@item.Quantity</td>
                    <td>@item.QuantityShipped</td>
                    <td>@(item.Quantity - item.QuantityShipped)</td>
                    <td>
                        <InputNumber @bind-Value="item.QuantityToShip"
                                     class="form-control"
                                     Min="0"
                                     Max="@GetMaxQuantity(item)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="CreatePackingList">Create Packing List</button>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private string? successMessage;
    private string? errorMessage;

    [Parameter]
    public int orderId { get; set; }

    private Order? order;
    private List<PackingListItemViewModel> packingListItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            // Fetch order and items with assigned lots
            order = await OrderService.GetOrderByIdAsync(orderId);

            if (order != null)
            {
                packingListItems = order.Items
                    .Where(item => item.InventoryId != null) // Only include items with lots assigned
                    .Select(item => new PackingListItemViewModel
                        {
                            OrderItemId = item.Id,
                            ArticleName = item.Article?.Name ?? "Unknown",
                            Quantity = item.Quantity,
                            QuantityShipped = item.QuantityShipped,
                            QuantityToShip = 0, // Initialize QuantityToShip for new packing list
                            LotNumber = item.Inventory?.LotNumber,
                            InventoryId = item.InventoryId
                        })
                    .ToList();
            }
            else
            {
                errorMessage = "Order not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load order: {ex.Message}";
        }
    }

    private async Task CreatePackingList()
    {
        try
        {
            // Filter and map items to save in the packing list
            var packingListItemsToSave = packingListItems
                .Where(item => item.QuantityToShip > 0) // Only include items with a quantity to ship
                .Select(item => new PackingListItem
                    {
                        OrderItemId = item.OrderItemId,
                        QuantityShipped = item.QuantityToShip
                    })
                .ToList();

            if (!packingListItemsToSave.Any())
            {
                errorMessage = "No items with quantities to ship.";
                return;
            }

            // Call the service to create the packing list
            await PackingListService.CreatePackingListAsync(orderId, packingListItemsToSave);

            successMessage = "Packing list created successfully.";
            errorMessage = null;

            // Refresh data after creating the packing list
            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to create packing list: {ex.Message}";
        }
    }
    private int GetMaxQuantity(PackingListItemViewModel item)
    {
        return item.Quantity - item.QuantityShipped;
    }
}
